// priority: 999

// file for defining custom generated materials and the flags to generate for them using EmendatusJS.
// For materials with an ore, specify ore drops and spawning in emenOreDefinitions file

/* 
    addFlags = adds these flags to the item, e.g. ['crystal', 'clump', 'ingot']
    delFlags = remove these flags from the items types base flags, e.g. ['crystal', 'clump', 'ingot']
 */

// IgnoreRegisterFlags is used on materials that already have the flags generated by another mod/vanilla -
// so that the material is still marked as having the flag elsewhere 
// (Maybe unessecary with serverside recipe unif changes?) 

/* 
    Materials added by vanilla, but still have additional flags generated for them
    All vanilla ores are replaced by EmendatusJS for custom strata generation
*/
global.vanilla_mats = {
    coal: { type: 'other', toolLvl: 'wood', ignoreRegisterFlags: ['storage_block', 'ore'], addFlags: ['ore'], delFlags: [] },
    copper: { type: 'metal', toolLvl: 'stone', ignoreRegisterFlags: ['ingot', 'raw_ore', 'ore', 'raw_block', 'storage_block'], addFlags: [], delFlags: [] },
    diamond: { type: 'gem', toolLvl: 'iron', ignoreRegisterFlags: ['gem', 'storage_block', 'ore'], addFlags: [], delFlags: [] },
    emerald: { type: 'gem', toolLvl: 'iron', ignoreRegisterFlags: ['gem', 'storage_block', 'ore'], addFlags: [], delFlags: [] },
    gold: { type: 'metal', toolLvl: 'iron', ignoreRegisterFlags: ['ingot', 'nugget', 'raw_ore', 'ore', 'raw_block', 'storage_block'], addFlags: [], delFlags: [] },
    iron: { type: 'metal', toolLvl: 'stone', ignoreRegisterFlags: ['ingot', 'nugget', 'raw_ore', 'ore', 'raw_block', 'storage_block'], addFlags: [], delFlags: [] },
    lapis: { type: 'gem', toolLvl: 'stone', ignoreRegisterFlags: ['gem', 'storage_block', 'ore'], addFlags: [], delFlags: [] },
    netherite: { type: 'metal', toolLvl: 'diamond', ignoreRegisterFlags: ['ingot', 'storage_block'], addFlags: [], delFlags: ['raw_ore', 'shard', 'ore', 'clump', 'crystal', 'dirty_dust', 'raw_block'] },
    quartz: { type: 'gem', toolLvl: 'stone', ignoreRegisterFlags: ['gem', 'storage_block', 'ore'], addFlags: [], delFlags: [] },
    redstone: { type: 'other', toolLvl: 'iron', ignoreRegisterFlags: ['dust', 'storage_block', 'ore'], addFlags: ['ore'], delFlags: [] },
}

// Materials comprised of multiple other materials
global.alloy_mats = { // alloy type has ingot, nugget, block default flags
    brass: { type: 'alloy', toolLvl: 'stone', addFlags: ['plate', 'gear', 'rod'], delFlags: [] },
    constantan: { type: 'alloy', toolLvl: 'stone', addFlags: ['plate', 'gear', 'dust', 'rod'], delFlags: [] },
    invar: { type: 'alloy', toolLvl: 'stone', addFlags: ['plate', 'gear', 'dust'], delFlags: [] },
    steel: { type: 'alloy', toolLvl: 'stone', addFlags: ['plate', 'gear', 'rod'], delFlags: [] },
    radiant_dawnstone: { type: 'alloy', toolLvl: 'iron', addFlags: [], delFlags: [] },
    dwarven_mithril: { type: 'alloy', toolLvl: 'netherite', addFlags: [], delFlags: [] },
    charged_certus_steel: { type: 'alloy', toolLvl: 'diamond', addFlags: ['gear'], delFlags: ['nugget'] },
}

// Gem materials (Has an ore that drops gem)
global.gem_mats = {
    apatite: { type: 'gem', toolLvl: 'stone', addFlags: [], delFlags: [] },
    charcoal: { type: 'other', toolLvl: 'stone', addFlags: ['dust'], delFlags: [] },
    cinnabar: { type: 'gem', toolLvl: 'stone', addFlags: [], delFlags: [] },
    dimensional: { type: 'gem', toolLvl: 'stone', addFlags: [], delFlags: [] },
    potassium_nitrate: { type: 'gem', toolLvl: 'stone', tagMaterials: ['niter', 'saltpeter'], addFlags: [], delFlags: [] },
    sapphire: { type: 'gem', toolLvl: 'iron', addFlags: ['ore'], delFlags: [] },
    source: { type: 'other', toolLvl: 'iron', tagMaterials: ['mana'], addFlags: ['ore'], delFlags: [] },
    sulfur: { type: 'gem', toolLvl: 'stone', addFlags: [], delFlags: [] },
    fluorite: { type: 'gem', toolLvl: 'stone', addFlags: [], delFlags: [] },
    ruby: { type: 'other', toolLvl: 'iron', addFlags: ['ore'], delFlags: [] },
}

// Metal materials (Has an ore and raw ore) 
global.metal_mats = {
    // - - metal - -
    aluminum: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: [] },
    arcane_gold: { type: 'other', toolLvl: 'iron', addFlags: [], delFlags: [] },
    lead: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: ['shard'] },
    nickel: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: [] },
    silver: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: [] },
    tin: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: ['shard'] },
    uranium: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: ['shard'] },
    zinc: { type: 'metal', toolLvl: 'iron', addFlags: [], delFlags: [] },
    cobalt: { type: 'metal', toolLvl: 'stone', addFlags: [], delFlags: [] },
    osmium: { type: 'metal', toolLvl: 'iron', addFlags: [], delFlags: ['shard'] }
}

// materials that don't have any default flags and or don't fall into another category
global.other_mats = {
    obsidian: { type: 'other', toolLvl: 'diamond', addFlags: ['dust'], delFlags: [] },

}

// Grouping all material categories to iterate
global.emendatus_mats = Object.assign({},
    global.vanilla_mats, global.alloy_mats, global.gem_mats, global.metal_mats, global.other_mats
)

// different item flags that can be applied to a material
global.emendatus_item_types = {
    nugget: { replacer: '@_nugget', tag: 'nuggets/', tags: ['forge:nuggets/@', 'forge:nuggets'] },
    ingot: { replacer: '@_ingot', tag: 'ingots/', tags: ['forge:ingots/@', 'forge:ingots'] },
    dust: { replacer: '@_dust', tag: 'dusts/', tags: ['forge:dusts/@', 'forge:dusts'] },
    plate: { replacer: '@_plate', tag: 'plates/', tags: ['forge:plates/@', 'forge:plates'] },
    rod: { replacer: '@_rod', tag: 'rods/', tags: ['forge:rods/@', 'forge:rods'] },
    gear: { replacer: '@_gear', tag: 'gears/', tags: ['forge:gears/@', 'forge:gears'] },
    gem: { replacer: '@_gem', tag: 'gems/', tags: ['forge:gems/@', 'forge:gems'] },
    gravel: { replacer: '@_gravel', tag: 'gravels/', tags: ['forge:gravels/@', 'forge:gravels'] },
    dirty_dust: { replacer: '@_dirty_dust', tag: 'dirty_dusts/', tags: ['forge:dirty_dusts/@', 'forge:dirty_dusts'] },
    fragment: { replacer: '@_fragment', tag: 'fragments/', tags: ['forge:fragments/@', 'forge:fragments'] },
    shard: { replacer: '@_shard', tag: 'shards/', tags: ['forge:shards/@', 'forge:shards'] },
    crystal: { replacer: '@_crystal', tag: 'crystals/', tags: ['forge:crystals/@', 'forge:crystals'] },
    clump: { replacer: '@_clump', tag: 'clumps/', tags: ['forge:clumps/@', 'forge:clumps'] },
    cluster_shard: { replacer: '@_cluster_shard', tag: 'cluster_shards/', tags: ['forge:cluster_shards/@', 'forge:cluster_shards'] },
    crushed_ore: { replacer: 'crushed_@_ore', tag: 'crushed_ores/', tags: ['forge:crushed_ores/@', 'forge:crushed_ores'] },
    raw_ore: { replacer: 'raw_@', tag: 'raw_materials/', tags: ['forge:raw_materials/@', 'forge:raw_materials'] }
}

// types of blocks that can be generated for material
global.emendatus_block_types = {
    storage_block: {
        replacer: '@_block', tag: 'storage_blocks/', tags: ['forge:storage_blocks/@', 'forge:storage_blocks']
    },
    ore: {
        replacer: '@_ore', tag: 'ores/', tags: ['forge:ores/@', 'forge:ores']
    },
    raw_block: {
        replacer: 'raw_@_block',
        tag: 'storage_blocks/raw_',
        tags: ['forge:storage_blocks/raw_@', 'forge:storage_blocks/raw']
    }
}

// combined item and block types for iterating over
global.emendatus_all_types = Object.assign(global.emendatus_item_types, global.emendatus_block_types)

// base item and block flags/types generated for each material category
global.emendatus_base_flags = {
    alloy: {
        item: ['ingot', 'nugget'],
        block: ['storage_block']
    },
    gem: {
        item: ['clump', /* 'cluster_shard', 'crystal', */ 'gem', 'gravel', 'plate', 'fragment', 'shard', 'gear', 'rod', 'dirty_dust', 'dust'],
        block: ['storage_block', 'ore']
    },
    metal: {
        item: ['clump', 'crystal', 'dirty_dust', 'dust', 'fragment', 'gear', 'gravel', 'ingot', 'nugget', 'plate', 'rod', 'raw_ore', 'shard'],
        block: ['storage_block', 'ore', 'raw_block']
    },
    other: {
        item: [],
        block: []
    },
    // all flags is used to check which material registry a flag belongs to
    all: {
        item: ['dust', 'clump', 'crystal', 'dirty_dust', 'dust', 'fragment', 'gear', 'gravel', 'ingot', 'nugget', 'plate', 'rod', 'raw_ore', 'shard', 'crushed_ore'],
        block: ['storage_block', 'ore', 'raw_block']
    }
}

// add a flags entry to each material object which has their final correct flags, with base + force added and removed flags
for (let matObj of Object.entries(global.emendatus_mats)) {
    global.emendatus_mats[matObj[0]].flags = {}

    global.emendatus_mats[matObj[0]].flags.item = global.emendatus_base_flags[matObj[1].type].item
        .filter(flag => !matObj[1].delFlags.includes(flag))
        .concat(matObj[1].addFlags.filter(flag => global.emendatus_base_flags.all.item.includes(flag)))

    global.emendatus_mats[matObj[0]].flags.block = global.emendatus_base_flags[matObj[1].type].block
        .filter(flag => !matObj[1].delFlags.includes(flag))
        .concat(matObj[1].addFlags.filter(flag => global.emendatus_base_flags.all.block.includes(flag)))

    global.emendatus_mats[matObj[0]].flags.all =
        global.emendatus_base_flags[matObj[1].type].item
            .concat(global.emendatus_base_flags[matObj[1].type].block)
            .filter(flag => !matObj[1].delFlags.includes(flag))
            .concat(matObj[1].addFlags)
}

// - - global functions - -

global.emenGetReplace = function emendatusGetReplacementString(replaceableString, materialName) {
    if (!replaceableString.includes('@')) { return replaceableString }
    return replaceableString.replace('@', materialName)
}